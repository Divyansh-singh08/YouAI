//import the icon

import bot from "/assets/bot.svg";
import user from "/assets/user.svg";
import axios from "axios";

//HTML
const form = document.querySelector("form");
const chatContainer = document.querySelector("#chat_container");

let loadInterval;

//loading functionality display logic here
function loader(element) {
	// '....wait'
	element.textContent = " ";

	loadInterval = setInterval(() => {
		element.textContent += ".";

		if (element.textContent === "....") {
			element.textContent = "";
		}
	}, 300);
}

//typing functionality which print letter by letter logic

function typeText(element, text) {
	let index = 0;

	let interval = setInterval(() => {
		if (index < text.length) {
			element.innerHTML += text.charAt(index);
			index++;
		} else {
			clearInterval(interval);
		}
	}, 20);
}

//later need to generate unique id for every  single msg for mapping

function generateUniqueId() {
	//unique id where generated by using date and time
	const timestamp = Date.now();
	//to make more random we use random function
	const randomNumber = Math.random();
	//now even more random we can use hexadecimal function
	const hexadecimalString = randomNumber.toString(16);

	// now  we will get id and return

	return `id-${timestamp}-${hexadecimalString}`;
}

//function for chat
//render the HTML code dynamic using js
function chatStripe(isAi, value, uniqueId) {
	return `
        <div class="wrapper ${isAi && "ai"}">
            <div class="chat">
                <div class="profile">
                    <img
                        src="${isAi ? bot : user}"
                        alt="${isAi ? "bot" : "user"}"
                    />
                </div>
                <div class="message" id=${uniqueId}>${value}></div>
            </div>
        </div>
        `;
}

//need to make function that ai generate text
const handleSubmit = async (e) => {
	e.preventDefault(); //we don't want to reload behaver of web

	//now we want the data that type into the form
	const data = new FormData(form);

	//now generate the user chatStrip
	chatContainer.innerHTML += chatStripe(false, data.get("prompt"));

	//finally we want to clear the area
	form.reset();

	//bot chatStrip
	const uniqueId = generateUniqueId();
	chatContainer.innerHTML += chatStripe(true, " ", uniqueId);

	//as chat going on we want to keep scrolling then this function will work then
	chatContainer.scrollTop = chatContainer.scrollHeight;

	//now we want to fetch the newly created the div
	const messageDiv = document.getElementById(uniqueId);

	//need to pass to the loader function
	loader(messageDiv);

	//fetch the data from the server :>bot response
	const response = await axios("http://localhost:5000/", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify({
			prompt: data.get("prompt"),
		}),
	});
	clearInterval(loadInterval);
	messageDiv.innerHTML = "";

	if (response.ok) {
		const data = await response.json();
		const parsedData = data.bot.trim();

		typeText(messageDiv, parsedData);
	} else {
		const err = await response.text();
		messageDiv.innerHTML = "Something went wrong";
		alert(err);
	}
};

// const handleSubmit = async (e) => {
// 	e.preventDefault(); //we don't want to reload behaver of web

// 	//now we want the data that type into the form
// 	const data = new FormData(form);

// 	//now generate the user chatStrip
// 	chatContainer.innerHTML += chatStripe(false, data.get("prompt"));

// 	//finally we want to clear the area
// 	form.reset();

// 	//bot chatStrip
// 	const uniqueId = generateUniqueId();
// 	chatContainer.innerHTML += chatStripe(true, " ", uniqueId);

// 	//as chat going on we want to keep scrolling then this function will work then
// 	chatContainer.scrollTop = chatContainer.scrollHeight;

// 	//now we want to fetch the newly created the div
// 	const messageDiv = document.getElementById(uniqueId);

// 	//need to pass to the loader function
// 	loader(messageDiv);

// 	//use limiter.wrap() to rate limit the API request
// 	const response = await limiter.wrap(() => {
// 		return fetch("http://localhost:5000/", {
// 			method: "POST",
// 			headers: {
// 				"Content-Type": "application/json",
// 			},
// 			body: JSON.stringify({
// 				prompt: data.get("prompt"),
// 			}),
// 		});
// 	});

// 	clearInterval(loadInterval);
// 	messageDiv.innerHTML = " ";

// 	if (response.ok) {
//         let responseData;
//         if (response.headers.get("content-type").includes("text")) {
//             responseData = await response.text();
//         } else {
//             responseData = await response.json();
//         }
//         const parsedData = responseData.bot.trim();
//         typeText(messageDiv, parsedData);
//     } else {
// 		console.log("response check ",response);
//         // const err = await response.text();

//         messageDiv.innerHTML = "Something went wrong";
//         // alert(err);
//     }
// };

form.addEventListener("submit", handleSubmit);
form.addEventListener("keyup", (e) => {
	if (e.key === 13) {
		handleSubmit(e);
	}
});
